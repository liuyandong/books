---
title: "发布日期"
---

这4本书，我都会提供前4章的预览，你可以先看看前4章，再决定要不要花这个钱。我给这几本书定了一个上线的日期。

因为大部分内容我都写完了，我目前的工作主要是复制粘贴，希望每天能处理1-2章。

| 书名                        | 目前完成度 | 完整上线日期 | 提供的格式 |
|-----------------------------|------------|--------------|------------|
| 《借助AI学习Java编程》      | 100%       | 2024.9.30前  | pdf   |
| 《借助AI用Java制作2D游戏》  | 100%        | 2024.12.31前 | pdf   |
| 《借助AI用Java制作GUI软件》 | 90%        | 2025.3.31前  | pdf   |
| 《Java Spring》             | 50%        | 2025.9.31前  | pdf   |

::: {.callout-tip icon="false"}
我确实想提供epub的格式，但是……代码在epub里实在是太丑了，我是真的看不下去 :(
:::

**我现在写了一些脚本，把markdown搞成LaTeX能识别的格式，然后用TeX Live生成pdf文件。**不是很流畅，有人有好的建议没？

**现在的工作流程比较脆弱，出点小错误，LaTeX就死给你看......**

::: callout-note
## 讲一下目前的流程吧

这样，大家可以给我提一些意见什么的。我对我目前的工作流程不是很满意，一直在改进。

1. 我最初写初稿的时候，用的是LaTeX，说实在的，这个比较好用，但是只能自顾自的玩，如果你想出版，可以用word，可以用markdown。

2. 我就换了word，这是个非常错误的选择，我写的字数太多了，又加上我执迷于用索引来处理所有的文字，代码，图片与表格，牵一发而动全身啊……用word排版对我太难了。

3. 我现在要做的事情是把word再搞成markdown，然后生成web的样子，以及pdf的样子。

4. 我试了不少工具，生成epub实在是太难了，文字还好，但是代码肯定会乱掉，目前我没有好办法。

5. 我每天尽量处理1-2章。（复制粘贴到令人发狂）

6. 我非常希望找到一个类似Jupyter Notebook的工具，可以运行Java代码，而不是Python代码，都不是很理想。也许我应该自己山寨一个，一边复制Java代码，一边自动生成代码的结果，是我目前最希望要的功能。简单点的还行，一旦涉及到引入了过多的package，就不跑了……
:::