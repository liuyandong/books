---
title: "目录"
---

<!--# 以下是第1章的目录 -->

# 第1章 Hello World

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip icon="false"}
先建了一个显示Hello World的用户界面，但是，这个界面并不适合游戏。原因是......

游戏需要每秒刷新60帧，必须要让游戏获得主动权，而不是刷新率多少，一切随缘。
:::

**1.1 创建Hello World应用程序**

```         
1.1.1 Java Swing是什么？ 
1.1.2 为什么不能使用被动渲染？ 
```

**1.2 使用主动渲染**

```         
1.2.1 什么是主动渲染？
1.2.2 定制主动渲染线程
1.3.3 创建主动渲染窗口
```

**1.3 帧率是个大问题**

```
1.3.1 如果你电脑太慢会怎么样？
1.3.2 如果你电脑太快会怎么样？
1.3.3 如何把帧率固定在你想要的60帧？
1.3.4 固定帧率非常难，比想象中的难太多了！
```
:::

<!--# 以下是第2章的目录 -->

# 第2章 交互

::: {.callout-warning appearance="minimal" icon="false"}
::: {.callout-tip icon="false"}
玩游戏、玩游戏，什么叫玩游戏？必须要与游戏交互才是玩游戏，否则那不成看电影了？

那如何跟游戏交互呢？键盘和鼠标。
:::

**2.1 什么是精灵**

```
2.1.1 精灵在游戏中的用途
2.1.2 精灵的基本概念
2.1.3 运动与动画
```

**2.2 如何处理键盘输入**


**2.3 如何处理鼠标输入**

:::

<!--# 以下是第3章的目录 -->

# 第3章 要学一点点数学了

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip icon="false"}
可能有很多人一听数学，一个脑袋两个大，但是相信我，咱们不是考试，只要理解原理就好了。

代码都是现成的，复制粘贴或者让AI来生成，一切搞定。
:::

**3.1 笛卡尔坐标与极坐标**

```
3.1.1 笛卡尔坐标与极坐标的介绍
3.1.2 两种坐标之间的转换
3.1.3 游戏中的屏幕坐标
```

**3.2 向量**

```
3.2.1 向量的基本定义与表示
3.2.2 2D游戏中向量的应用：位移、速度和加速度
```

**3.3 矩阵变换**

```
3.3.1 矩阵的基础概念与操作
3.3.2 2D变换矩阵：平移、旋转和缩放
3.3.3 矩阵乘法以及应用
```

**3.4 多维数组与矩阵**

```
3.4.1 行主序（Row-major order）矩阵
3.4.2 列主序（Column-major order）矩阵
```

:::

<!--# 以下是第4章目录 -->

# 第4章 碰撞检测

::: {.callout-warning appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
不是你碰的，你为什么要扶她？

开发2D游戏时，碰撞检测是一个重要的部分，用于处理角色与物体的交互、障碍物检测、敌人的反应等。
:::

**4.1 基础碰撞检测技术**

```
4.1.1 轴对齐边界盒检测
4.1.2 圆形测试相交检测
4.1.3 圆形与矩形碰撞检测
4.1.4 矩形与矩形碰撞检测
```

**4.2 高级碰撞检测技术**

```
4.2.1 凸多边形的碰撞检测
4.2.2 分离轴定理（SAT - Separating Axis Theorem）
4.2.3 像素级碰撞检测（Pixel-perfect Collision）
4.2.4 精确检测复杂形状的碰撞
4.2.5 使用Alpha通道处理透明区域
```

**4.3 有追求的人，仍旧可以精益求精**

```         
4.3.1 使用空间分区技术优化碰撞检测
4.3.1.1 四叉树（Quadtree）
4.3.1.2 网格（Grid）方法
4.3.2 减少不必要的碰撞检测
4.3.2.1 广义阶段（Broad Phase）与精确阶段（Narrow Phase）
4.3.3 使用Bounding Circle减少计算
```

**4.4 撞了以后怎么办？**

```         
4.4.1 碰撞后的反弹与物体移动
4.4.2 物体的摩擦力与阻力
4.4.3 弹性碰撞与非弹性碰撞
4.4.4 向量反射处理碰撞
4.4.5 碰撞法线与物体反应
4.4.6 使用向量预测碰撞
```

:::

<!--# 以下是第5章目录 -->

# 第5章 LibGDX 和 JBox2D

::: {.callout-note appearance="minimal"}
::: {.callout-tip appearance="minimal" icon="false"}
了解了碰撞的原理，实际上，是不用自己亲自动手的，只是我喜欢研究一下基本的原理。

我们可以用一些现成的库，或者引擎来处理碰撞检测，比如LibGDX与JBox2D。

说实话，写游戏的，没有不用引擎的。我搞的这本书，只是解释了什么叫2D引擎，浅尝辄止一下，继续研究底层原理。

**如果你搞懂了LibGDX这个2D引擎，就不看我这本书了，求求你不要搞懂！！**

**LibGDX的源码在我心目中与Lua的源码，SQLite的源码，并列为三大“最尊重程序员”的开源代码**，而不像Linux源码，看也看不懂，学也学不会，代码量又多，老虎吃天！

这三个开源项目的代码，又纯又欲，推荐阅读。
:::

**5.1 物理引擎与碰撞检测**

```
5.1.1 集成 Box2D 物理引擎
  5.1.1.1 刚体（Rigid Bodies）的定义与使用
  5.1.1.2 碰撞形状（Colliders）和力学属性
5.1.2 使用 Box2D 进行碰撞检测
5.1.3 处理物体的物理响应
```

**5.2 其它的无所不能的功能列举**

```
5.2.1 2D引擎也有输入处理
5.2.1 声音与音乐必不可少
5.2.3 2D图形与渲染、精灵也能处理
5.2.4 场景管理也支持
5.2.5 爆炸、烟花也能支持（离子系统）
5.2.6 网络联机功能也不在话下
```

**5.3 引擎虽好，不要贪杯哦**

```
5.3.1 2D引擎千千万
5.3.2 换了别的就完蛋
5.3.3 还是要理解底层原理
```

:::

<!--# 以下是第6章的内容 -->

# 第6章 文件和资源

::: {.callout-warning appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
声音，图像，关卡数据，一定是存在文件里的。好处至少有两点：
```
第一，当增删查改数据的时候，不需要重新编译软件
第二, 不想玩游戏了，可以保存，想玩了，可以读存档
```
但是，这一章更多的是Java文件操作的内容，我也许应该放到Java那本书里。
:::

**6.1 Java处理文件**

**6.2 输入与输出流**

**6.3 jar包**

**6.4 XML文件**

:::

# 第7章 图像

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
Java是一门“古老”的语言，所以Java支持大量的图像格式，但是，如果做游戏，只需要理解两种图像格式就可以了。一种是BufferedImage，另一种是VolatileImage。
:::

**7.1 BufferedImage格式的图片**

**7.2 VolatileImage格式的图片**

**7.3 创建透明图像**

**7.4 使用alpha合成**

**7.5 使用新技术绘制精灵**
:::

# 第8章 声音

::: {.callout-warning icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
没有声音的游戏，缺少灵魂。
:::

**8.1 声音API介绍**

**8.2 使用Clip类加载和播放音效**

**8.3 调整音量和音效**

**8.4 使用SourceDataLine播放背景音乐**

**8.5 在游戏中触发声音事件**
:::

# 第9章 字体

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
游戏中要显示字，显示字不难，难的是显示的字如何在游戏中协调。

很多游戏，为了协调，会自己设计字体。英文还好，只有26个字母，大小写加起来不过60个。中文就比较要命了，至少几千个字 :)

对中文字体设计者致以最高的敬意！
:::

**9.1 字体的基础知识**

```
9.1.1 字体的基本概念
9.1.2 字体的格式（TrueType与OpenType）
9.1.3 字体的创建与管理
```

**9.2 加载自定义字体**

```         
9.2.1 从文件中加载自定义字体
9.2.2 设置字体样式和大小
9.2.3 绘制文本
9.2.4 排版与渲染效果
```

**9.3 处理多语言和国际化**
:::

# 第10章 至此，引擎所有的知识已经讲差不多了

::: {.callout-warning appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
如何把功能相关的类组织到一起呢？答案是用“包”。
:::

**10.1 包的简介**

**10.2 包的语法与用法**

```         
10.2.1 如何声明包
10.2.2 如何导入包
10.2.3 如何使用包中的成员
```

**10.3 使用包的最佳实践**

```         
10.3.1 如何命名包？
10.3.2 如何以包为结构组织项目代码
```
:::

# 第11章 继承

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
权力可以继承，财富可以继承，代码就不可以继承么？当然能！

继承最重要的功能是为了代码重用，减少代码的重复。官/富二代最重要的功能也是继承富一代的权与钱，减少从零奋斗的过程。
:::

**11.1 什么是继承**

**11.2 类实例的继承机制**

```         
11.2.1 子类可以继承父类的属性么？
11.2.2 子类可以继承父类的方法么？
10.2.3 如何使用super关键字？
```

**11.3 静态成员的继承机制**

**11.4 不可被继承的类和方法**

```         
11.4.1 final用于修饰类是用来阻止类被继承
11.4.2 final用于修饰方法是阻止方法被覆盖
```

**11.5 多重继承的问题**
:::

# 第12章 抽象类

::: {.callout-warning appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
在《公孙龙子·白马论》中提出了“白马非马”的诡辩，如果第二个马是抽象类的话，那么“白马”就是“马”。“公孙龙”认为“马”不能实例化，但是“白马”可以实例化。

我认为战国时期的公孙龙所持有的“每个事物只能是它自己，事物间不存在联系”的观点是错误的，至少在面向对象中是如此。

不能实例化的“马”，在面向对象编程中叫“抽象类”。
:::

**12.1 抽象类概述**

**12.2 抽象类的实现**
:::

# 第13章 接口

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
在11章里讲过，Java不能多重继承，爸当官，妈当官，难道孩子不能同时继承两者的权力与财富么？在现实中，肯定能！（不信你看哪个公子，哪条鲶鱼，都是多重继承的……）

但是在Java中却不能，Java不支持多重继承，如果你需要多重继承怎么办？用接口。

<http://www.gotw.ca/publications/c_family_interview.htm> 在这篇访谈中，C++的作者与Java的作者，都谈到了编程语言的设计，其实Java的作者对接口与类的设计也不满意。
:::

**13.1 接口的历史**

**13.2 接口的定义与实现**

**13.3 接口与抽象类**

**13.4 接口引入DEFAULT方法**

**13.5 接口中引入静态方法**

**13.6 接口的继承与多重继承**

```         
13.6.1 接口的作用
13.6.2 接口与抽象的区别
```
:::

# 第14章 多态

::: {.callout-warning appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
什么动物婴儿时四条腿，成年后两条腿，老年时三条腿？答案是：人。

当我们调用走路的时候，同样的人，但是有不同的走路形态，小时候爬，长大后两条腿，老年后拄着一根拐杖。

这就是多态，用统一的方式（走路），却实现了不同的形态（爬，走，拄拐）。

本章介绍了如何用不同的方法实现多态。
:::

**14.1 用继承来实现多态**

```         
14.1.1 方法重写（Override）为多态提供基础
14.1.2 向上转型（Upcasting）为多态提供统一调用方式
```

**14.2 用接口来实现多态**

**14.3 用继承与用接口实现多态有什么不同？**

**14.4 用泛型来实现多态**
:::

# 第15章 集合

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
第8章的时候，我“黑”了一下数组，数组作为一种数据结构，实在是太原始了。

那用什么方法来代替数组呢？就是本章讲的集合。

集合比数组好用太多了，不一个时代的产品。
:::

**15.1 集合的基本概念**

```         
15.1.1 什么是集合
15.1.2 集合与数组的区别
```

**15.2 Java集合框架的架构体系**

**15.3 集合的核心接口与实现类**

```         
15.3.1 Iterable接口
15.3.2 Collection接口
15.3.3 List接口以及实现类
15.3.4 Set接口以及实现类
15.3.5 Map接口以及实现类
```
:::

# 第16章 异常处理

::: {.callout-warning appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
嫦娥应悔偷灵药，碧海青天夜夜心。

嫦娥犯的错，只能无限的懊悔，毕竟没有后悔药卖。但是Java中，为异常处理设置了非常多的防御措施，确保嫦娥偷不到灵药，防患于未然 :)
:::

**16.1 异常的基础概念**

```         
16.1.1 什么是异常
16.1.2 异常的类型和层次结构
16.1.3 Error和Exception的区别
```

**16.2 异常捕获处理**

```         
16.2.1 throws语句
16.2.2 try-catch-finally语句
```

**16.3 Java内置的常见异常类型**

```         
16.3.1 非受检异常（Unchecked Exception）
16.3.2 受检异常（Checked Exceptions）
16.3.3 错误（Error）
```

**16.4 自定义异常**

**16.5 异常链**

**16.6 异常与资源管理**
:::

# 第17章 函数式编程

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
绝大部分Java编程书上，都不讲泛型，一是太难，二是觉得没什么用。但是，看看下面的语言：

```         
Java之前不支持泛型，Java 5之后增加了泛型。
C#之前不支持泛型，C# 2.0之后增加了泛型。
Go语言之前不支持泛型，G为1.18之后增加了泛型。
```

难肯定是难的，有用肯定是有用的，花点时间是值得的。

泛型解决的问题与继承、多态解决的问题是一脉相承的：**代码复用**。比如容器中可以存整数，也可存小数，还可以存小猫小狗这样的对象……如果逻辑一样，一点小改动就要重新调整代码，自己也受不了……

现实中也是如此，油罐车可以拉煤油，可以拉汽油，甚至可以拉食用油……这当然可能会出现各种安全问题，所以需要很多的技术来确保安全。
:::

**17.1 泛型的概念与作用**

```         
17.1.1 Java泛型的历史
17.1.2 泛型的用途与语法
```

**17.2 如何定义泛型类？**

**17.3 如何定义泛型接口？**

**17.4 如何定义泛型方法？**

```         
17.4.1 泛型方法和多态的区别
17.4.2 泛型方法与泛型类、泛型接口的区别
```

**17.5 类型通配符的概念与使用场景**

```         
17.5.1 无界通配符（?）的概念与使用场景
17.5.2 上界通配符（\<? extends XXX\>）的概念与使用场景
17.5.3 下界通配符（\<? super XXX\>）的概念与使用场景
17.5.4 通配符的PECS(Producer Extends,Consumer Super)原则
```

**17.6 泛型的继承与子类型规则**

```         
17.6.1 泛型的不变性规则及其影响
17.6.2 通配符的协变规则与逆变规则
```

**17.7 泛型中的类型擦除**

```         
17.7.1 什么是类型擦除
17.7.2 JVM在编译时如何处理泛型
17.7.3 类型擦除对编程的影响
17.7.4 泛型对数组的影响
```
:::

# 第18章 函数式编程

::: {.callout-warning appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
离婚的原因是什么？千千万万，但是最重要的一个是：心变了。

bug的原因是什么？千千万万，但是最重要的一个是：状态变了。

什么叫状态变了呢？64核的CPU中，有1个核修改了全局变量，但其它63个核不知道；有个文件被修改了，但其它进程不知道…… 状态改变，是bug的高发原因。

如何让离婚率变为0？方法是减少结婚，有感情的就同居得了。

如何让bug减少？方法是减少命令式编程，增加函数式编程。

于是，随着CPU核心的增多、分布式、协同式程序的增多，不改变程序状态的函数式编程“死灰复燃”了……

本章从Lisp历史谈起，让大家清晰的了解什么叫函数式编程，为何Java的函数式编程不如Lisp那么优雅……
:::

**18.1 第一门函数式编程语言：LISP语言**

```         
18.1.1 Lisp简介
18.1.2 Racket以及Racket的语法
```

**18.2 Lambda表达式**

```         
18.2.1 什么是Lambda表达式
18.2.2 无参数的Lambda表达式
18.2.3 有一个参数的Lambda表达式
18.2.4 有两个参数的Lambda表达式
18.2.5 如何将Lambda表达式赋值给变量？
```

**18.3 函数式接口**

```         
18.3.1 为什么需要函数式接口?
18.3.2 函数式接口的种类有多少?
18.3.3 函数式接口为何只能有一个抽象方法？
18.3.4 方法引用
18.3.5 如何自定义函数式接口?
```

**18.4 Stream API**

```         
18.4.1 什么是Stream
18.4.2 创建Stream的各种方式
18.4.3 Stream操作的分类
18.4.4 常见的中间操作
18.4.5 常见的终端操作
```
:::

# 第19章 枚举类型

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
在Java中，枚举已经强大到什么地步了呢？几乎所有类能做的事情，枚举都能做。枚举是一种特殊的类。

枚举不止是简单的常量的集合，还可以拥有属性、方法和构造函数。还支持接口和实现。

简单来说，**枚举是受限的类**。
:::

**19.1 枚举概述**

```         
19.1.1 什么是枚举
19.1.2 枚举和常量的区别
```

**19.2 定义枚举**

**19.3 枚举的高级特性**

```         
19.3.1 枚举类型不能继承，但是可以实现接口
19.3.2 枚举无法被实例化
19.3.3 枚举常量实例最好设置为final
19.3.4 不能依赖于枚举常量的序数
19.3.5 values()和valueOf()方法
19.3.6 EnumSet和EnumMap
```
:::

# 第20章 注解

::: {.callout-warning appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
注解是Java 5之后引入的。

对司机而言，开车的时候，最重要的信息是路上的指示牌。比如看到“前方有急转弯”，你就会注意一点。

同样，注解类似于这些路牌，当看到\@Override的时候，编译器会去查一下父类中是否有这个方法，当看到\@Deprecated的时候，会提示这个方法已经过时了……

注解的本质是提供额外的元数据和指示，帮助编译器、工具和开发者更好地理解和处理代码。
:::

**20.1 什么是注解**

**20.2 在代码中使用Java预定义的注解**

```         
20.2.1 注解与注释的区别
20.2.2 使用Java预定义的注解
```

**20.3 在代码中使用自定义的注解**

```         
20.3.1 定义注解
20.3.2 使用注解
20.3.3 解析注解
```
:::

# 第21章 反射

::: {.callout-note appearance="minimal" icon="false"}
::: {.callout-tip appearance="minimal" icon="false"}
据说，违反法律最刺激，要是违反了法律还不被制裁，就更是刺激了。比如古人有云：“妻不如...”，这句话你自己去搜搜吧。

前面我们讲类的作用，又是封装，又是隐藏。然后突然来一个机制，啥封装，啥隐藏？直接给你显微镜下看的明明白白的……是不是很刺激？

反射就是这样的，使用反射，咱们可以正在光明的走后门，所有的类定义的条条框框，都可以不用遵守。让你觉得像个特权阶级。
:::

**21.1 反射的历史与发展**

```         
21.1.1 起初，反射仅仅是为了跨平台
21.1.2 后来，反射的发展就“失控”了
```

**21.2 获取Class对象**

```         
22.2.1 Class对象是Java反射机制的基础
22.2.2 获取Class对象的三种方式
```

**21.3 基础的反射API**

```         
21.3.1 构造类操作
21.3.2 属性类操作 
21.3.3 方法类操作
```

**21.4 MethodHandler和VarHandle**

**21.5 反射的局限**

```         
21.5.1 性能开销问题
21.5.2 破坏封装性
21.5.3 反射代码往往难以维护
```
:::

::: callout-important
这本书写了21章，而且肯定还有很多内容没有覆盖到，如果我说一些漂亮话，什么“书山有路勒为径，学海无涯苦作舟”，让大家再多学点什么的，一般人实际上内心是比较崩溃的。

那学到什么时候是个头啊？！

实际上，你根本不需要学这么多。我之所以写这么多，是因为这是“写书”，其目的是“尽量覆盖”，而现实中做项目，其目的是“尽快做完下班”。

如果你继续读我剩下的三本书，你会发现，每本书都只是用到这本书里“部分内容”，比如做游戏，你就用不到反射，也用不到函数编程，因此会不会这些稀奇古怪的东西，对开发游戏完全没影响。
:::
